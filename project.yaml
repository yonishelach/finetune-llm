kind: project
metadata:
  name: mlopspedia-admin
  created: '2023-05-09T16:31:52.073000'
spec:
  functions:
  - url: src/data_collection.py
    name: data-collecting
    kind: job
  - url: src/data_preprocess.py
    name: data-preparing
    kind: job
  - url: src/trainer.py
    name: mpi-training
    kind: mpijob
    image: yonishelach/mlrun-hf-gpu
  - url: src/trainer.py
    name: training
    kind: job
  - url: src/serving.py
    name: serving-gpt2
    kind: serving
  - url: src/serving.py
    name: serving-mlopspedia
    kind: serving
  - url: src/testing.py
    name: testing
    kind: job
    handler: model_server_tester
  - name: serving-gpt2-gpu
    spec:
      kind: serving
      metadata:
        name: serving-gpt2-gpu
        project: mlopspedia-admin
      spec:
        command: ''
        args: []
        image: yonishelach/mlrun-hf-gpu
        build:
          functionSourceCode: 
          source: ./
          commands: []
          code_origin: git://github.com/yonishelach/learn-docs.git#refs/heads/main
          origin_filename: src/serving.py
        description: ''
        default_handler: ''
        disable_auto_mount: false
        env: []
        resources:
          requests:
            memory: 1Mi
            cpu: 25m
          limits:
            nvidia.com/gpu: 4
            memory: 244Gi
            cpu: 32
        image_pull_secret: docker-registry-admin-creds
        priority_class_name: igz-workload-medium
        preemption_mode: prevent
        min_replicas: 1
        max_replicas: 4
        source: ''
        function_kind: serving_v2
        function_handler: serving:handler
        base_image_pull: false
        graph:
          steps:
            preprocess:
              kind: task
              handler: clean_preprocess
              after: []
            gpt2:
              kind: task
              class_name: LLMModelServer
              class_args:
                model_name: gpt2-medium
                model_class: GPT2LMHeadModel
                tokenizer_name: gpt2-medium
                tokenizer_class: GPT2Tokenizer
                use_deepspeed: true
                n_gpus: 4
              after:
              - preprocess
            postprocess:
              kind: task
              handler: clean_postprocess
              after:
              - gpt2
            toxicity-classifier:
              kind: task
              class_name: ToxicityClassifierModelServer
              class_args:
                threshold: 0.7
              after:
              - postprocess
              responder: true
          engine: async
        secret_sources: []
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: app.iguazio.com/lifecycle
                  operator: NotIn
                  values:
                  - preemptible
                - key: eks.amazonaws.com/capacityType
                  operator: NotIn
                  values:
                  - SPOT
                - key: node-lifecycle
                  operator: NotIn
                  values:
                  - spot
        tolerations: null
        security_context: {}
      verbose: false
  workflows:
  - path: src/training_workflow.py
    name: training_workflow
  artifacts: []
  conda: ''
  source: git://github.com/yonishelach/learn-docs.git#main
  origin_url: git://github.com/yonishelach/learn-docs.git#refs/heads/main
  load_source_on_run: true
  desired_state: online
  owner: admin
  default_image: yonishelach/mlrun-hf
status:
  state: online
